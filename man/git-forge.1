.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "git-forge" 1 "Jan 2021" "Linux" "git-forge"
.SH NAME
git-forge \- git porcelain for interacting with various git forge workflows
(github/gitlab/etc)
.SH "SYNOPSIS"

.nf
\fBgit-forge <subcommand> [options]\fR
.fi

.SH "DESCRIPTION"

.PP
The purpose of \fBgit-forge\fR is to allow an abstracted command line based
access to the various popular git forge type workflows.  \fBgit-forge\fR allows
a user to associate various local repositories with their various api endpoints,
so that various forge tasks (fork management, PR creation, branch sync, etc),
can be handle more easily, without having to visit the specific forges website
in a browser, or having to remember the specifics of that forges workflow 

.SH "SUBCOMMANDS"
.TP
.SS addforge [-h] <-apiurl url> <--cloneurl url> <--name name> <--type type> <--user user> <--pass password>

The addforge subcommand adds to your global gitconfig file a forge entry, which stores information regarding a given forge for later use

.TP
.SS delforge [-h] <-name name>
The delforge subcommand removes the forge configurations from your gitconfig
file, referenced by the name option as provided in the addforge command

.TP
.SS fork [-h] <url>

The fork command creates a private copy of a repository in your own workspace 
The url option is the git url that you with to make a copy of

.TP
.SS clone [options] <url>

The clone command creates a local copy of the url provided.  Its is a superset
of the git clone command 


